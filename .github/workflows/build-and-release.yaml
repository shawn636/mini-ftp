name: Build, Push, and Release

on:
    push:
        branches:
            - main
    schedule:
        - cron: "0 0 * * 1" # Weekly build
    workflow_dispatch: # Manual trigger

env:
    IMAGE_NAME: shawnlong636/mini-ftp
    MINORS_TO_KEEP: 3

jobs:
    build-and-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set LOG_LEVEL Environment Variable
              run: |
                  if [ "${{ runner.debug }}" == '1' ]; then
                    echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
                  else
                    echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
                  fi

            # Bump Version
            - name: Bump Version
              id: version_bump
              run: |
                  VERSION_FILE="VERSION"
                  if [ ! -f "$VERSION_FILE" ]; then
                    echo "1.0.0" > $VERSION_FILE
                  fi
                  current_version=$(cat $VERSION_FILE)
                  IFS='.' read -r major minor patch <<< "$current_version"
                  new_patch=$((patch + 1))
                  new_version="$major.$minor.$new_patch"
                  echo $new_version > $VERSION_FILE
                  echo "VERSION=$new_version" >> $GITHUB_ENV
                  echo "version=$new_version" >> $GITHUB_OUTPUT

            # Commit Version Update
            - name: Commit Version Update
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git add VERSION
                  git commit --no-verify -m "Bump version to ${{ steps.version_bump.outputs.version }}"
                  git push

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            # Cache Docker Compose
            - name: Cache Docker Compose
              id: cache-compose
              uses: actions/cache@v3
              with:
                  path: /usr/local/bin/docker-compose
                  key: compose-${{ runner.os }}-v2.19.1

            - name: Install Docker Compose (if not cached)
              if: steps.cache-compose.outputs.cache-hit != 'true'
              run: |
                  sudo curl -L "https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Create .env File
              run: |
                  echo "Generating .env file..."
                  cat <<EOF > .env
                  DUCKDNSTOKEN=${{ secrets.DUCKDNSTOKEN }}
                  CONFIG_ONLY_TEST_USER_PASS=${{ secrets.CONFIG_ONLY_TEST_USER_PASS }}
                  CONFIG_ONLY_SSL_TEST_USER1_PASS=${{ secrets.CONFIG_ONLY_SSL_TEST_USER1_PASS }}
                  CONFIG_ONLY_SSL_TEST_USER2_PASS=${{ secrets.CONFIG_ONLY_SSL_TEST_USER2_PASS }}
                  ENV_OVERRIDE_TEST_USER1_PASS=${{ secrets.ENV_OVERRIDE_TEST_USER1_PASS }}
                  ENV_OVERRIDE_TEST_USER2_PASS=${{ secrets.ENV_OVERRIDE_TEST_USER2_PASS }}
                  ENV_OVERRIDE_SSL_TEST_USER1_PASS=${{ secrets.ENV_OVERRIDE_SSL_TEST_USER1_PASS }}
                  ENV_OVERRIDE_SSL_TEST_USER2_PASS=${{ secrets.ENV_OVERRIDE_SSL_TEST_USER2_PASS }}
                  EOF
