name: Build, Push, and Release

on:
    workflow_run:
        workflows:
            - Test
        types:
            - completed

env:
    IMAGE_NAME: shawn636/mini-ftp
    GHCR_IMAGE_NAME: ghcr.io/${{ github.repository }}

concurrency:
    group: ${{ github.workflow }}-${{ github.ref_name }}
    cancel-in-progress: true

jobs:
    build-and-release:
        runs-on: ubuntu-latest

        if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            # Bump Version
            - name: Bump Version (if triggered by bot or cron)
              id: version_bump
              if: ${{ github.actor == 'dependabot[bot]' || github.event_name == 'schedule' }}
              run: |
                  VERSION_FILE="VERSION"
                  if [ ! -f "$VERSION_FILE" ]; then
                    echo "1.0.0" > $VERSION_FILE
                  fi
                  current_version=$(cat $VERSION_FILE)
                  IFS='.' read -r major minor patch <<< "$current_version"

                  # Default to patch bump
                  new_patch=$((patch + 1))
                  new_version="$major.$minor.$new_patch"

                  echo $new_version > $VERSION_FILE
                  echo "Exporting VERSION=${new_version}"
                  echo "VERSION=${new_version}" >> $GITHUB_ENV
                  echo "::set-output name=VERSION::$new_version"

            # Debug Version
            - name: Debug Version
              run: |
                  VERSION=$(cat VERSION)
                  echo "VERSION is: $VERSION"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
              with:
                  driver: docker-container

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and Push Images to Docker Hub
              run: |
                  VERSION=$(cat VERSION)
                  ALPINE_LATEST="latest"
                  ALPINE_VERSIONS=("3.21" "3.20" "3.19")
                  PLATFORMS="linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/s390x"

                  echo "Building and pushing images to Docker Hub for version: $VERSION"

                  docker buildx build --push \
                      --progress plain \
                      --platform $PLATFORMS \
                      --tag ${{ env.IMAGE_NAME }}:$VERSION \
                      --tag ${{ env.IMAGE_NAME }}:$VERSION-alpine-$ALPINE_LATEST \
                      --build-arg ALPINE_VERSION=$ALPINE_LATEST .

                  for version in "${ALPINE_VERSIONS[@]}"; do
                      TAG_SUFFIX="alpine-$version"
                      docker buildx build --push \
                          --progress plain \
                          --platform $PLATFORMS \
                          --tag ${{ env.IMAGE_NAME }}:$VERSION-$TAG_SUFFIX \
                          --build-arg ALPINE_VERSION=$version .

            - name: Build and Push Images to GitHub Container Registry
              run: |
                  VERSION=$(cat VERSION)
                  ALPINE_LATEST="latest"
                  ALPINE_VERSIONS=("3.21" "3.20" "3.19")
                  PLATFORMS="linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/s390x"

                  echo "Building and pushing images to GHCR for version: $VERSION"

                  docker buildx build --push \
                      --progress plain \
                      --platform $PLATFORMS \
                      --tag ${{ env.GHCR_IMAGE_NAME }}:$VERSION \
                      --tag ${{ env.GHCR_IMAGE_NAME }}:$VERSION-alpine-$ALPINE_LATEST \
                      --build-arg ALPINE_VERSION=$ALPINE_LATEST .

                  for version in "${ALPINE_VERSIONS[@]}"; do
                      TAG_SUFFIX="alpine-$version"
                      docker buildx build --push \
                          --progress plain \
                          --platform $PLATFORMS \
                          --tag ${{ env.GHCR_IMAGE_NAME }}:$VERSION-$TAG_SUFFIX \
                          --build-arg ALPINE_VERSION=$version .

            - name: Create GitHub Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ steps.version_bump.outputs.VERSION }}
                  release_name: Release ${{ steps.version_bump.outputs.VERSION }}
                  body: |
                      This release includes the following updates:
                      - Updated Docker images to version ${{ steps.version_bump.outputs.VERSION }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Finalize Release
              run: echo "Successfully released version $(cat VERSION)"
